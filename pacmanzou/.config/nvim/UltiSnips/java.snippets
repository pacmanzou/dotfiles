global !p
def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet sleep "try sleep catch" b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e){
	e.printStackTrace();
}
endsnippet

snippet pcm "public class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	public static void main(String[] args) {
	$0
	}
}
endsnippet

snippet pc "public class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet co "Constructor" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}() {}
$0
endsnippet

snippet co1 "Constructor 1" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3) {
	this.$3 = $3;
}
$0
endsnippet

snippet co2 "Constructor t2" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3 , ${4:String} $5) {
	this.$3 = $3;
	this.$5 = $5;
}
$0
endsnippet

snippet co3 "Constructor 3" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3 , ${4:String} $5 , ${6:String} $7) {
	this.$3 = $3;
	this.$5 = $5;
	this.$7 = $7;
}
$0
endsnippet

snippet co4 "Constructor 4" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3 , ${4:String} $5 , ${6:String} $7 , ${8:String} $9) {
	this.$3 = $3;
	this.$5 = $5;
	this.$7 = $7;
	this.$9 = $9;
}
$0
endsnippet

snippet co5 "Constructor 5" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3 , ${4:String} $5 , ${6:String} $7 , ${8:String} $9 , ${10:String} $11) {
	this.$3 = $3;
	this.$5 = $5;
	this.$7 = $7;
	this.$9 = $9;
	this.$11 = $11;
}
$0
endsnippet

snippet co6 "Constructor 6" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3 , ${4:String} $5 , ${6:String} $7 , ${8:String} $9 , ${10:String} $11 , ${12:String} $13) {
	this.$3 = $3;
	this.$5 = $5;
	this.$7 = $7;
	this.$9 = $9;
	this.$11 = $11;
	this.$13 = $13;
}
$0
endsnippet

snippet co7 "Constructor 7" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3 , ${4:String} $5 , ${6:String} $7 , ${8:String} $9 , ${10:String} $11 , ${12:String} $13 , ${14:String} $15) {
	this.$3 = $3;
	this.$5 = $5;
	this.$7 = $7;
	this.$9 = $9;
	this.$11 = $11;
	this.$13 = $13;
	this.$15 = $15;
}
$0
endsnippet

snippet co8 "Constructor 8" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3 , ${4:String} $5 , ${6:String} $7 , ${8:String} $9 , ${10:String} $11 , ${12:String} $13 , ${14:String} $15 , ${16:String} $17) {
	this.$3 = $3;
	this.$5 = $5;
	this.$7 = $7;
	this.$9 = $9;
	this.$11 = $11;
	this.$13 = $13;
	this.$15 = $15;
	this.$17 = $17;
}
$0
endsnippet

snippet co9 "Constructor 9" b
public ${1:`!p
snip.rv = snip.basename or "untitled"`}(${2:String} $3 , ${4:String} $5 , ${6:String} $7 , ${8:String} $9 , ${10:String} $11 , ${12:String} $13 , ${14:String} $15 , ${16:String} $17 , ${18:String} $19) {
	this.$3 = $3;
	this.$5 = $5;
	this.$7 = $7;
	this.$9 = $9;
	this.$11 = $11;
	this.$13 = $13;
	this.$15 = $15;
	this.$17 = $17;
	this.$19 = $19;
}
$0
endsnippet

snippet get "getter" b
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet Sca "Scanner"  b
Scanner ${1:input}=new Scanner(System.in);
$0
endsnippet

snippet in "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet list "Collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<$1>();
endsnippet

snippet mm "main method" b
public static void main(String[] args) {
	$0
}
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<$1, $2>();
endsnippet

snippet mt "method throws" b
${1:private} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet pr "print" b
System.out.print($1);$0
endsnippet

snippet pl "print line"  b
System.out.println($1);$0
endsnippet

snippet set "setter" b
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet setget "setter and getter" b
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv += "\n"`
public $2 get$1() {
	return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet pce "public class extends"
public class ${1:childclass} extends ${2:superclass} {
	public $1() {}
	$0
}
endsnippet

snippet sm "static method" b
${1:public} static ${2:void} ${3:methodname}($4) {
	$5
}
endsnippet

snippet im "instance method" b
${1:public} ${2:void} ${3:methodname}($4) {
	$5
}
endsnippet

snippet tc "try/catch" b
try {
	$1${VISUAL}
} catch(${2:Exception} ${3:e}){
	${4:e.printStackTrace();}
}
endsnippet

# vim:ft=snippets:
