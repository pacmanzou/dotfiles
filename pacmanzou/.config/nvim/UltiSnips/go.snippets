# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet /^struct/ "Struct declaration" r
type ${1:StructName} struct {
	${0:${VISUAL}}
}
endsnippet

snippet /^interface/ "Interface declaration" r
type ${1:InterfaceName} interface {
	${0:${VISUAL}}
}
endsnippet

snippet for "for int loop" b
for ${1:i} := 0; $1 < ${2:count}; $1++ {
	${0:${VISUAL}}
}
endsnippet

snippet forr "for range loop" b
for ${1:i} := range ${2:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet switch "switch" b
switch ${1:var} {
case ${2:value1}:
	${3}
case ${4:value2}:
	${5}
default:
	${0}
}
endsnippet

snippet if "if condition" w
if ${1:condition} {
	$2
}${0:${VISUAL}}
endsnippet

snippet else "else" w
else {
	$1
}
endsnippet

snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^method/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" w
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet err "Basic error handling" b
if err != nil {
	log.${1:Fatal}(err)
}
endsnippet

snippet sleep "time.Sleep" b
time.Sleep(${1:1} * time.${0:Second})
endsnippet

snippet itoa "int -> string" w
strconv.Itoa(${0:${VISUAL}})
endsnippet

snippet atoi "string -> int" w
strconv.Atoi(${0:${VISUAL}})
endsnippet

snippet /^sort/ "method of sort.Interface" r
func (s $1) Len() int {
	return len(s)
}

func (s $1) Less(i, j int) bool {
	return s[i] ${2:<} s[j]
}

func (s $1) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}
endsnippet

snippet /^heap/ "method of heap.Interface" r
func (s *$1) Pop() interface{} {
	x := (*s)[len(*s)-1]
	*s = (*s)[:len(*s)-1]
	return x
}

func (s *$1) Push(x interface{}) {
	*s = append(*s, x.(int))
}
endsnippet

snippet mid "binary search mid" w
mid := int(uint(left+right) >> 1)
endsnippet
